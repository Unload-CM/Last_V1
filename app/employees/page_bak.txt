'use client';

import { useState, useEffect, useRef } from 'react';
import Navigation from '@/components/Navigation';
import { FiSearch, FiUserPlus, FiFilter, FiDownload, FiUser, FiPhone, FiMail, FiCalendar, FiChevronLeft, FiChevronRight, FiX, FiUpload } from 'react-icons/fi';
import { format } from 'date-fns';
import * as XLSX from 'xlsx';

// ?꾩떆 ?ㅺ뎅??泥섎━ ?⑥닔
const useTranslation = () => {
  return {
    t: (key: string) => {
      const translations: {[key: string]: string} = {
        'employees.title': '?ъ썝 愿由?,
        'employees.description': '?ъ썝 ?뺣낫 愿由?諛?議고쉶',
        'employees.search': '?ъ썝 寃??,
        'employees.addNew': '?좉퇋 ?깅줉',
        'employees.filter': '?꾪꽣',
        'employees.export': '?대낫?닿린',
        'employees.id': '?ъ썝 ID',
        'employees.name': '?대쫫',
        'employees.position': '吏곸콉',
        'employees.department': '遺??,
        'employees.contact': '?곕씫泥?,
        'employees.email': '?대찓??,
        'employees.hireDate': '?낆궗??,
        'employees.actions': '?묒뾽',
        'employees.total': '珥??ъ썝 ??,
        'employees.page': '?섏씠吏',
        'employees.of': '/',
        'employees.prev': '?댁쟾',
        'employees.next': '?ㅼ쓬',
        'employees.noResults': '寃??寃곌낵媛 ?놁뒿?덈떎',
        'employees.loading': '?곗씠?곕? 遺덈윭?ㅻ뒗 以?..',
        'employees.error': '?곗씠?곕? 遺덈윭?ㅻ뒗 以??ㅻ쪟媛 諛쒖깮?덉뒿?덈떎',
        'employees.filterTitle': '?꾪꽣 ?듭뀡',
        'employees.filterPosition': '吏곸콉 ?꾪꽣',
        'employees.filterDepartment': '遺???꾪꽣',
        'employees.filterApply': '?곸슜',
        'employees.filterReset': '珥덇린??,
        'employees.edit': '?몄쭛',
        'employees.delete': '??젣'
      };
      return translations[key] || key;
    }
  };
};

// ?ъ썝 ????뺤쓽
interface Employee {
  id: number;
  employeeId: string;
  name: string;
  position: string;
  department: string;
  contact: string;
  email: string;
  hireDate: string;
}

// ?섏씠吏?ㅼ씠???뺣낫 ????뺤쓽
interface Pagination {
  total: number;
  page: number;
  limit: number;
  totalPages: number;
}

// 遺???꾩씠??????뺤쓽
interface DepartmentItem {
  id: number;
  value: string;
  label: string;
  description: string;
}

// 湲곕낯 遺???곗씠??const DEFAULT_DEPARTMENT_ITEMS = [
  { id: 1, value: '?앹궛遺', label: '?앹궛遺', description: '?쒗뭹 ?앹궛 ?대떦' },
  { id: 2, value: '?덉쭏愿由щ?', label: '?덉쭏愿由щ?', description: '?덉쭏 寃??諛?愿由??대떦' },
  { id: 3, value: '臾쇰쪟李쎄퀬', label: '臾쇰쪟李쎄퀬', description: '臾쇰쪟 諛??ш퀬 愿由??대떦' },
  { id: 4, value: '?먯옱愿由?, label: '?먯옱愿由?, description: '?먯옱 議곕떖 諛?愿由??대떦' },
];

export default function EmployeesPage() {
  const { t } = useTranslation();
  const [employees, setEmployees] = useState<Employee[]>([]);
  const [pagination, setPagination] = useState<Pagination>({
    total: 0,
    page: 1,
    limit: 10,
    totalPages: 0
  });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  
  // 寃??諛??꾪꽣 ?곹깭
  const [searchTerm, setSearchTerm] = useState('');
  const [isFilterOpen, setIsFilterOpen] = useState(false);
  const [positionFilter, setPositionFilter] = useState('');
  const [departmentFilter, setDepartmentFilter] = useState('');
  const [employeeIdFilter, setEmployeeIdFilter] = useState('');
  
  // 吏곸콉 諛?遺??紐⑸줉
  const positions = ['愿由ъ옄', '?ъ썝'];
  const [departments, setDepartments] = useState<string[]>([]);
  const [departmentItems, setDepartmentItems] = useState<DepartmentItem[]>(DEFAULT_DEPARTMENT_ITEMS);
  
  // ?좉퇋 ?깅줉 紐⑤떖 ?곹깭
  const [isNewEmployeeModalOpen, setIsNewEmployeeModalOpen] = useState(false);
  const [newEmployee, setNewEmployee] = useState({
    name: '',
    position: '',
    department: '',
    contact: '',
    email: '',
    hireDate: format(new Date(), 'yyyy-MM-dd'),
    employeeIdNumber: ''
  });
  const [formErrors, setFormErrors] = useState<{[key: string]: string}>({});
  
  // ?곗씠??珥덇린???뺤씤 紐⑤떖
  const [showDataResetModal, setShowDataResetModal] = useState(false);
  const [showLargeDataWarning, setShowLargeDataWarning] = useState(false);
  const [employeeCount, setEmployeeCount] = useState(0);
  
  // ?묒? ?뚯씪 ?낅줈??愿???곹깭
  const [showExcelImportModal, setShowExcelImportModal] = useState(false);
  const [importResults, setImportResults] = useState<{
    total: number;
    success: number;
    errors: string[];
  }>({ total: 0, success: 0, errors: [] });
  const fileInputRef = useRef<HTMLInputElement>(null);
  
  // ?곗씠??珥덇린???뺤씤
  useEffect(() => {
    try {
      // 濡쒖뺄 ?ㅽ넗由ъ??먯꽌 吏곸썝 ?곗씠???뺤씤
      const storedEmployees = JSON.parse(localStorage.getItem('employees') || '[]');
      setEmployeeCount(storedEmployees.length);
      
      // ?먮룞 ?앹꽦???곗씠?곕줈 異붿젙?섎뒗 寃쎌슦 (500媛??댁긽) - 寃쎄퀬留??쒖떆
      if (storedEmployees.length >= 500) {
        console.log('留롮? ?묒쓽 吏곸썝 ?곗씠?곌? 諛쒓껄?섏뿀?듬땲??500紐??댁긽). ?먮룞 ?앹꽦???곗씠?곗씪 ???덉뒿?덈떎.');
        setShowLargeDataWarning(true);
      }
    } catch (error) {
      console.error('吏곸썝 ?곗씠???뺤씤 以??ㅻ쪟 諛쒖깮:', error);
    }
  }, []);
  
  // 遺???곗씠??濡쒕뱶
  useEffect(() => {
    try {
      // 濡쒖뺄 ?ㅽ넗由ъ??먯꽌 遺???곗씠??濡쒕뱶
      const savedDepartmentItems = localStorage.getItem('departmentItems');
      if (savedDepartmentItems) {
        const parsedDepartmentItems = JSON.parse(savedDepartmentItems);
        setDepartmentItems(parsedDepartmentItems);
        // 遺???대쫫留?異붿텧?섏뿬 諛곗뿴濡????        setDepartments(parsedDepartmentItems.map((item: DepartmentItem) => item.value));
      } else {
        // 湲곕낯 遺???곗씠???ъ슜
        setDepartments(DEFAULT_DEPARTMENT_ITEMS.map(item => item.value));
      }
    } catch (error) {
      console.error('遺???곗씠??濡쒕뱶 以??ㅻ쪟 諛쒖깮:', error);
      // ?ㅻ쪟 諛쒖깮 ??湲곕낯 遺???곗씠???ъ슜
      setDepartments(DEFAULT_DEPARTMENT_ITEMS.map(item => item.value));
    }
  }, []);
  
  // ?ъ썝 ?곗씠??遺덈윭?ㅺ린
  const fetchEmployees = () => {
    setLoading(true);
    setError(null);
    
    try {
      // 濡쒖뺄 ?ㅽ넗由ъ??먯꽌 吏곸젒 ?곗씠??濡쒕뱶
      const employees = JSON.parse(localStorage.getItem('employees') || '[]');
      
      // 寃???꾪꽣留?      let filteredEmployees = [...employees];
      
      if (searchTerm) {
        const searchLower = searchTerm.toLowerCase();
        filteredEmployees = filteredEmployees.filter(emp => 
          emp.name.toLowerCase().includes(searchLower) ||
          (emp.employeeId && emp.employeeId.toLowerCase().includes(searchLower)) ||
          (emp.email && emp.email.toLowerCase().includes(searchLower)) ||
          (emp.contact && emp.contact.includes(searchTerm))
        );
      }
      
      // 吏곸콉 ?꾪꽣留?      if (positionFilter) {
        filteredEmployees = filteredEmployees.filter(emp => emp.position === positionFilter);
      }
      
      // 遺???꾪꽣留?      if (departmentFilter) {
        filteredEmployees = filteredEmployees.filter(emp => emp.department === departmentFilter);
      }
      
      // ?ъ썝 ID ?꾪꽣留?      if (employeeIdFilter) {
        filteredEmployees = filteredEmployees.filter(emp => 
          emp.employeeId && emp.employeeId.toLowerCase().includes(employeeIdFilter.toLowerCase())
        );
      }
      
      // 珥?吏곸썝 ??      const totalCount = filteredEmployees.length;
      
      // ?섏씠吏?ㅼ씠??怨꾩궛
      const start = (pagination.page - 1) * pagination.limit;
      const end = start + pagination.limit;
      const paginatedEmployees = filteredEmployees.slice(start, end);
      
      // ?곗씠???ㅼ젙
      setEmployees(paginatedEmployees);
      setPagination(prev => ({
        ...prev,
        total: totalCount,
        totalPages: Math.ceil(totalCount / pagination.limit)
      }));
    } catch (err) {
      console.error('?ъ썝 ?곗씠??遺덈윭?ㅺ린 ?ㅻ쪟:', err);
      setError('?ъ썝 ?곗씠?곕? 遺덈윭?ㅻ뒗 以??ㅻ쪟媛 諛쒖깮?덉뒿?덈떎.');
    } finally {
      setLoading(false);
    }
  };
  
  // ?섏씠吏 蹂寃?泥섎━
  const handlePageChange = (newPage: number) => {
    if (newPage >= 1 && newPage <= pagination.totalPages) {
      setPagination(prev => ({ ...prev, page: newPage }));
    }
  };
  
  // ?꾪꽣 ?곸슜
  const applyFilters = () => {
    setPagination(prev => ({ ...prev, page: 1 })); // ?꾪꽣 ?곸슜 ??泥??섏씠吏濡??대룞
    setIsFilterOpen(false);
    fetchEmployees();
  };
  
  // ?꾪꽣 珥덇린??  const resetFilters = () => {
    setSearchTerm('');
    setPositionFilter('');
    setDepartmentFilter('');
    setEmployeeIdFilter('');
    setPagination(prev => ({ ...prev, page: 1 }));
    setIsFilterOpen(false);
  };
  
  // 寃?됱뼱 蹂寃???API ?몄텧
  useEffect(() => {
    const delayDebounceFn = setTimeout(() => {
      setPagination(prev => ({ ...prev, page: 1 }));
      fetchEmployees();
    }, 500);
    
    return () => clearTimeout(delayDebounceFn);
  }, [searchTerm]);
  
  // ?섏씠吏, ?꾪꽣 蹂寃???API ?몄텧
  useEffect(() => {
    fetchEmployees();
  }, [pagination.page, pagination.limit]);
  
  // ?좎쭨 ?щ㎎???⑥닔
  const formatDate = (dateString: string) => {
    try {
      return format(new Date(dateString), 'yyyy-MM-dd');
    } catch (e) {
      return dateString;
    }
  };
  
  // ?좉퇋 ?ъ썝 ?낅젰 泥섎━
  const handleNewEmployeeChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    
    // ?ъ썝 ID 踰덊샇 泥섎━ - ?レ옄留??낅젰 媛?ν븯?꾨줉
    if (name === 'employeeIdNumber') {
      // ?レ옄留??덉슜
      const numericValue = value.replace(/\D/g, '');
      setNewEmployee(prev => ({ ...prev, [name]: numericValue }));
    } else {
      setNewEmployee(prev => ({ ...prev, [name]: value }));
    }
    
    // ?먮윭 ?곹깭 珥덇린??    if (formErrors[name]) {
      setFormErrors(prev => {
        const newErrors = { ...prev };
        delete newErrors[name];
        return newErrors;
      });
    }
  };
  
  // ?좉퇋 ?ъ썝 ?깅줉 泥섎━
  const handleSubmitNewEmployee = (e: React.FormEvent) => {
    e.preventDefault();
    
    // ?ъ썝 ID 踰덊샇媛 4?먮━ 誘몃쭔??寃쎌슦 ?욎뿉 0 梨꾩슦湲?    let formattedIdNumber = newEmployee.employeeIdNumber;
    if (formattedIdNumber.length > 0 && formattedIdNumber.length < 4) {
      formattedIdNumber = formattedIdNumber.padStart(4, '0');
      setNewEmployee(prev => ({ ...prev, employeeIdNumber: formattedIdNumber }));
    }
    
    // ?좏슚??寃??    const errors: {[key: string]: string} = {};
    if (!newEmployee.name.trim()) errors.name = '?대쫫???낅젰?댁＜?몄슂';
    if (!newEmployee.position) errors.position = '吏곸콉???좏깮?댁＜?몄슂';
    if (!newEmployee.department) errors.department = '遺?쒕? ?좏깮?댁＜?몄슂';
    if (!newEmployee.contact.trim()) errors.contact = '?곕씫泥섎? ?낅젰?댁＜?몄슂';
    if (!newEmployee.hireDate) errors.hireDate = '?낆궗?쇱쓣 ?좏깮?댁＜?몄슂';
    
    // ?ъ썝 ID 踰덊샇 寃??異붽?
    if (!newEmployee.employeeIdNumber.trim()) {
      errors.employeeIdNumber = '?ъ썝 ID 踰덊샇瑜??낅젰?댁＜?몄슂';
    } else if (!/^\d{4}$/.test(newEmployee.employeeIdNumber)) {
      errors.employeeIdNumber = '?ъ썝 ID 踰덊샇??4?먮━ ?レ옄?ъ빞 ?⑸땲??;
    }
    
    // ?대찓???뺤떇 寃??(?대찓?쇱씠 ?덈뒗 寃쎌슦?먮쭔)
    if (newEmployee.email) {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(newEmployee.email)) {
        errors.email = '?좏슚???대찓??二쇱냼瑜??낅젰?댁＜?몄슂';
      }
    }
    
    // ?곕씫泥??뺤떇 寃??    const phoneRegex = /^01([0|1|6|7|8|9])(-?[0-9]{3,4})(-?[0-9]{4})$/;
    if (newEmployee.contact && !phoneRegex.test(newEmployee.contact)) {
      errors.contact = '?좏슚???곕씫泥섎? ?낅젰?댁＜?몄슂 (?? 01012345678 ?먮뒗 010-1234-5678)';
    }
    
    if (Object.keys(errors).length > 0) {
      setFormErrors(errors);
      return;
    }
    
    try {
      // 濡쒖뺄 ?ㅽ넗由ъ??먯꽌 湲곗〈 吏곸썝 ?곗씠??媛?몄삤湲?      const existingEmployees = JSON.parse(localStorage.getItem('employees') || '[]');
      
      // ?ъ썝 ID 以묐났 ?뺤씤
      const newEmployeeId = `TCME${newEmployee.employeeIdNumber}`;
      const isIdDuplicate = existingEmployees.some((emp: any) => emp.employeeId === newEmployeeId);
      
      if (isIdDuplicate) {
        setFormErrors({ employeeIdNumber: '?대? ?ъ슜 以묒씤 ?ъ썝 ID 踰덊샇?낅땲?? });
        return;
      }
      
      // ??吏곸썝 ID ?앹꽦 - ?ш린?쒕뒗 ?낅젰??4?먮━ ?レ옄瑜??ъ슜
      const lastId = existingEmployees.length > 0 ? 
        Math.max(...existingEmployees.map((emp: any) => emp.id)) : 0;
      
      // ?곕씫泥??뺤떇 ?뺣━ (?섏씠??異붽?)
      let formattedContact = newEmployee.contact;
      // ?섏씠?덉씠 ?녿뒗 寃쎌슦 異붽?
      if (!formattedContact.includes('-')) {
        if (formattedContact.length === 11) { // 01012345678 ?뺤떇
          formattedContact = `${formattedContact.slice(0, 3)}-${formattedContact.slice(3, 7)}-${formattedContact.slice(7)}`;
        } else if (formattedContact.length === 10) { // 0101234567 ?뺤떇
          formattedContact = `${formattedContact.slice(0, 3)}-${formattedContact.slice(3, 6)}-${formattedContact.slice(6)}`;
        }
      }
      
      // ??吏곸썝 媛앹껜 ?앹꽦
      const newEmployeeData = {
        id: lastId + 1,
        employeeId: newEmployeeId, // TCME + 4?먮━ ?レ옄
        name: newEmployee.name,
        position: newEmployee.position,
        department: newEmployee.department,
        contact: formattedContact,
        email: newEmployee.email || '',
        hireDate: newEmployee.hireDate,
        value: newEmployee.name,
        label: `${newEmployee.name} (${newEmployee.department} - ${newEmployee.position})`
      };
      
      // 濡쒖뺄 ?ㅽ넗由ъ??????      const updatedEmployees = [...existingEmployees, newEmployeeData];
      localStorage.setItem('employees', JSON.stringify(updatedEmployees));
      
      // 留ㅻ땲???寃쎌슦 愿由ъ옄 紐⑸줉??異붽?
      if (newEmployee.position === '留ㅻ땲?') {
        const existingAdmins = JSON.parse(localStorage.getItem('admins') || '[]');
        const newAdmin = {
          id: newEmployeeData.id,
          value: newEmployeeData.name,
          label: newEmployeeData.name,
          department: newEmployeeData.department,
          position: newEmployeeData.position
        };
        
        const updatedAdmins = [...existingAdmins, newAdmin];
        localStorage.setItem('admins', JSON.stringify(updatedAdmins));
      }
      
      // 紐⑤떖 ?リ퀬 ??珥덇린??      setIsNewEmployeeModalOpen(false);
      setNewEmployee({
        name: '',
        position: '',
        department: '',
        contact: '',
        email: '',
        hireDate: format(new Date(), 'yyyy-MM-dd'),
        employeeIdNumber: ''
      });
      
      // ?곗씠???덈줈怨좎묠
      fetchEmployees();
      alert('?ъ썝???깃났?곸쑝濡??깅줉?섏뿀?듬땲??');
    } catch (err: any) {
      console.error('?ъ썝 ?깅줉 ?ㅻ쪟:', err);
      alert(err.message || '?ъ썝 ?깅줉 以??ㅻ쪟媛 諛쒖깮?덉뒿?덈떎.');
    }
  };
  
  // ?ъ썝 ??젣 ?⑥닔
  const handleDeleteEmployee = (id: number) => {
    if (window.confirm('?뺣쭚濡????ъ썝????젣?섏떆寃좎뒿?덇퉴?')) {
      try {
        // 濡쒖뺄 ?ㅽ넗由ъ??먯꽌 ?곗씠??媛?몄삤湲?        const existingEmployees = JSON.parse(localStorage.getItem('employees') || '[]');
        
        // ??젣???ъ썝 李얘린
        const employeeToDelete = existingEmployees.find((emp: Employee) => emp.id === id);
        if (!employeeToDelete) {
          alert('?대떦 ?ъ썝??李얠쓣 ???놁뒿?덈떎.');
          return;
        }
        
        // 吏곸썝 紐⑸줉?먯꽌 ?쒓굅
        const updatedEmployees = existingEmployees.filter((emp: Employee) => emp.id !== id);
        localStorage.setItem('employees', JSON.stringify(updatedEmployees));
        
        // 留ㅻ땲???寃쎌슦 愿由ъ옄 紐⑸줉?먯꽌???쒓굅
        if (employeeToDelete.position === '留ㅻ땲?') {
          const existingAdmins = JSON.parse(localStorage.getItem('admins') || '[]');
          const updatedAdmins = existingAdmins.filter((admin: any) => admin.id !== id);
          localStorage.setItem('admins', JSON.stringify(updatedAdmins));
        }
        
        // ?곗씠???덈줈怨좎묠
        fetchEmployees();
        alert('?ъ썝???깃났?곸쑝濡???젣?섏뿀?듬땲??');
      } catch (err) {
        console.error('?ъ썝 ??젣 ?ㅻ쪟:', err);
        alert('?ъ썝 ??젣 以??ㅻ쪟媛 諛쒖깮?덉뒿?덈떎.');
      }
    }
  };
  
  // 紐⑤뱺 ?ъ썝 ??젣 ?⑥닔
  const handleDeleteAllEmployees = () => {
    resetEmployeeData();
  };
  
  // ?곗씠??珥덇린???⑥닔
  const resetEmployeeData = () => {
    try {
      // 濡쒖뺄 ?ㅽ넗由ъ??먯꽌 吏곸썝 諛?愿由ъ옄 ?곗씠????젣
      localStorage.removeItem('employees');
      localStorage.removeItem('admins');
      
      // 鍮?諛곗뿴濡?珥덇린??      localStorage.setItem('employees', JSON.stringify([]));
      localStorage.setItem('admins', JSON.stringify([]));
      
      // 紐⑤떖 ?リ린
      setShowDataResetModal(false);
      setShowLargeDataWarning(false);
      setEmployeeCount(0);
      
      // ?곗씠???덈줈怨좎묠
      fetchEmployees();
      alert('紐⑤뱺 吏곸썝 ?곗씠?곌? 珥덇린?붾릺?덉뒿?덈떎.');
    } catch (error) {
      console.error('吏곸썝 ?곗씠??珥덇린??以??ㅻ쪟 諛쒖깮:', error);
      alert('吏곸썝 ?곗씠??珥덇린??以??ㅻ쪟媛 諛쒖깮?덉뒿?덈떎.');
    }
  };
  
  // ?묒? ?뚯씪 泥섎━ ?⑥닔
  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = (e) => {
      try {
        const data = e.target?.result;
        const workbook = XLSX.read(data, { type: 'binary' });
        const sheetName = workbook.SheetNames[0];
        const worksheet = workbook.Sheets[sheetName];
        const json = XLSX.utils.sheet_to_json(worksheet);
        
        processExcelData(json);
      } catch (error) {
        console.error('?묒? ?뚯씪 泥섎━ 以??ㅻ쪟 諛쒖깮:', error);
        setImportResults({
          total: 0,
          success: 0,
          errors: ['?묒? ?뚯씪 泥섎━ 以??ㅻ쪟媛 諛쒖깮?덉뒿?덈떎.']
        });
      }
    };
    
    reader.onerror = () => {
      setImportResults({
        total: 0,
        success: 0,
        errors: ['?뚯씪???쎈뒗 以??ㅻ쪟媛 諛쒖깮?덉뒿?덈떎.']
      });
    };
    
    reader.readAsBinaryString(file);
  };
  
  // ?묒? ?곗씠??泥섎━ ?⑥닔
  const processExcelData = (data: any[]) => {
    if (!data || data.length === 0) {
      setImportResults({
        total: 0,
        success: 0,
        errors: ['?곗씠?곌? ?녾굅???뺤떇???щ컮瑜댁? ?딆뒿?덈떎.']
      });
      return;
    }
    
    const existingEmployees = JSON.parse(localStorage.getItem('employees') || '[]');
    const existingIds = new Set(existingEmployees.map((emp: Employee) => emp.employeeId));
    
    const results = {
      total: data.length,
      success: 0,
      errors: [] as string[]
    };
    
    const newEmployees: Employee[] = [];
    
    for (let i = 0; i < data.length; i++) {
      const row = data[i];
      try {
        // ?꾩닔 ?꾨뱶 寃??        if (!row.name || !row.position || !row.department) {
          results.errors.push(`??${i + 2}: ?대쫫, 吏곸콉, 遺?쒕뒗 ?꾩닔 ??ぉ?낅땲??`);
          continue;
        }
        
        // ?ъ썝 ID ?앹꽦 ?먮뒗 媛?몄삤湲?        let employeeId = row.employeeId;
        if (!employeeId) {
          // ID媛 ?녿뒗 寃쎌슦 TCME + 4?먮━ ?レ옄 ?뺤떇?쇰줈 ?앹꽦
          const idNumber = String(Math.floor(1000 + Math.random() * 9000));
          employeeId = `TCME${idNumber}`;
        } else if (!employeeId.startsWith('TCME')) {
          // TCME ?뺤떇???꾨땶 寃쎌슦 蹂??          employeeId = `TCME${String(employeeId).padStart(4, '0')}`;
        }
        
        // ID 以묐났 寃??        if (existingIds.has(employeeId)) {
          results.errors.push(`??${i + 2}: ?대? 議댁옱?섎뒗 ?ъ썝 ID?낅땲?? ${employeeId}`);
          continue;
        }
        
        // ?곕씫泥??뺤떇 泥섎━
        let contact = row.contact || '';
        if (contact && !contact.includes('-')) {
          if (contact.length === 11) {
            contact = `${contact.slice(0, 3)}-${contact.slice(3, 7)}-${contact.slice(7)}`;
          } else if (contact.length === 10) {
            contact = `${contact.slice(0, 3)}-${contact.slice(3, 6)}-${contact.slice(6)}`;
          }
        }
        
        // ?좉퇋 ?ъ썝 媛앹껜 ?앹꽦
        const newEmployee = {
          id: existingEmployees.length + newEmployees.length + 1,
          employeeId,
          name: row.name,
          position: row.position,
          department: row.department,
          contact: contact,
          email: row.email || '',
          hireDate: row.hireDate || format(new Date(), 'yyyy-MM-dd'),
          value: row.name,
          label: `${row.name} (${row.department} - ${row.position})`
        };
        
        newEmployees.push(newEmployee);
        existingIds.add(employeeId);
        results.success++;
      } catch (err) {
        results.errors.push(`??${i + 2}: 泥섎━ 以??ㅻ쪟 諛쒖깮`);
      }
    }
    
    // 濡쒖뺄 ?ㅽ넗由ъ??????    if (newEmployees.length > 0) {
      const updatedEmployees = [...existingEmployees, ...newEmployees];
      localStorage.setItem('employees', JSON.stringify(updatedEmployees));
      
      // 留ㅻ땲???寃쎌슦 愿由ъ옄 紐⑸줉??異붽?
      const existingAdmins = JSON.parse(localStorage.getItem('admins') || '[]');
      const newAdmins = newEmployees
        .filter(emp => emp.position === '留ㅻ땲?')
        .map(emp => ({
          id: emp.id,
          value: emp.name,
          label: emp.name,
          department: emp.department,
          position: emp.position
        }));
      
      if (newAdmins.length > 0) {
        const updatedAdmins = [...existingAdmins, ...newAdmins];
        localStorage.setItem('admins', JSON.stringify(updatedAdmins));
      }
      
      // ?곗씠???덈줈怨좎묠
      fetchEmployees();
    }
    
    setImportResults(results);
  };
  
  // ?뚯씪 ?낅줈???몃━嫄??⑥닔
  const triggerFileInput = () => {
    if (fileInputRef.current) {
      fileInputRef.current.click();
    }
  };
  
  // ?묒? ?섑뵆 ?ㅼ슫濡쒕뱶 ?⑥닔
  const downloadExcelTemplate = () => {
    // ?섑뵆 ?곗씠???앹꽦
    const sampleData = [
      { name: '?띻만??, position: '留ㅻ땲?', department: '?앹궛遺', contact: '010-1234-5678', email: 'hong@example.com', hireDate: '2023-01-01' },
      { name: '源泥좎닔', position: '?ъ썝', department: '?덉쭏愿由щ?', contact: '010-8765-4321', email: 'kim@example.com', hireDate: '2023-02-15' }
    ];
    
    // ?뚰겕?쒗듃 ?앹꽦
    const ws = XLSX.utils.json_to_sheet(sampleData);
    
    // ?뚰겕遺??앹꽦
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, '?ъ썝紐⑸줉');
    
    // ?뚯씪 ?ㅼ슫濡쒕뱶
    XLSX.writeFile(wb, '?ъ썝紐⑸줉_?쒗뵆由?xlsx');
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <Navigation />
      <main className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
        {/* ?ㅻ뜑 */}
        <div className="bg-white shadow rounded-lg mb-6 p-6">
          <h1 className="text-2xl font-bold text-gray-900">{t('employees.title')}</h1>
          <p className="mt-1 text-sm text-gray-500">{t('employees.description')}</p>
          
          {/* ?곕룞 ?뺣낫 ?뚮┝ */}
          <div className="mt-4 p-3 bg-blue-50 border border-blue-200 rounded-md">
            <div className="flex items-start">
              <div className="flex-shrink-0">
                <svg className="h-5 w-5 text-blue-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
                </svg>
              </div>
              <div className="ml-3 flex-1">
                <p className="text-sm text-blue-700">
                  ???ъ썝愿由ъ갹? <span className="font-medium">?ㅼ젙 &gt; ?댁뒋 ?곗씠??愿由?&gt; 遺??愿由?/span>? ?곕룞?섏뼱 ?덉뒿?덈떎. 
                  遺??紐⑸줉??異붽??섍굅???섏젙?섎젮硫??ㅼ젙 ?섏씠吏?먯꽌 愿由ы븯?몄슂.
                </p>
                <div className="mt-2">
                  <a href="/settings" className="text-sm font-medium text-blue-600 hover:text-blue-500">
                    ?ㅼ젙 ?섏씠吏濡??대룞 &rarr;
                  </a>
                </div>
              </div>
            </div>
          </div>
          
          {/* ????곗씠??寃쎄퀬 ?뚮┝ */}
          {showLargeDataWarning && (
            <div className="mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded-md">
              <div className="flex items-start">
                <div className="flex-shrink-0">
                  <svg className="h-5 w-5 text-yellow-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.667-1.743-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" clipRule="evenodd" />
                  </svg>
                </div>
                <div className="ml-3 flex-1">
                  <h3 className="text-sm font-medium text-yellow-800">留롮? ?묒쓽 ?ъ썝 ?곗씠??媛먯???/h3>
                  <div className="mt-2 text-sm text-yellow-700">
                    <p>
                      ?꾩옱 {employeeCount}紐낆쓽 ?ъ썝 ?곗씠?곌? ?덉뒿?덈떎. ?대뒗 ?먮룞 ?앹꽦???곗씠?곗씪 ???덉뒿?덈떎.
                      500紐??댁긽???곗씠?곌? 媛먯??섏뼱 ?뚮젮?쒕┰?덈떎. ?ㅼ젣 ?ъ슜 以묒씤 ?곗씠?곕씪硫???寃쎄퀬瑜?臾댁떆?섏뀛???⑸땲??
                    </p>
                    <div className="mt-3">
                      <button
                        type="button"
                        className="inline-flex items-center px-3 py-1.5 border border-transparent text-xs font-medium rounded-md text-white bg-yellow-600 hover:bg-yellow-700 focus:outline-none"
                        onClick={() => setShowDataResetModal(true)}
                      >
                        紐⑤뱺 ?ъ썝 ?곗씠??珥덇린??                      </button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
        
        {/* 珥덇린???뺤씤 紐⑤떖 */}
        {showDataResetModal && (
          <div className="fixed inset-0 z-50 overflow-y-auto">
            <div className="flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
              <div className="fixed inset-0 transition-opacity" aria-hidden="true">
                <div className="absolute inset-0 bg-gray-500 opacity-75" onClick={() => setShowDataResetModal(false)}></div>
              </div>
              <div className="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
                <div className="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                  <div className="sm:flex sm:items-start">
                    <div className="mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-red-100 sm:mx-0 sm:h-10 sm:w-10">
                      <svg className="h-6 w-6 text-red-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                      </svg>
                    </div>
                    <div className="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left">
                      <h3 className="text-lg leading-6 font-medium text-gray-900">紐⑤뱺 ?ъ썝 ?곗씠??珥덇린??/h3>
                      <div className="mt-2">
                        <p className="text-sm text-gray-500">
                          ?뺣쭚濡?紐⑤뱺 ?ъ썝 ?곗씠?곕? 珥덇린?뷀븯?쒓쿋?듬땲源? ???묒뾽? ?섎룎由????놁쑝硫? 紐⑤뱺 ?ъ썝 ?뺣낫媛 ?곴뎄?곸쑝濡???젣?⑸땲??
                        </p>
                        <p className="mt-2 text-sm font-medium text-red-600">
                          ?꾩옱 {employeeCount}紐낆쓽 ?ъ썝 ?곗씠?곌? ??젣?⑸땲??
                        </p>
                      </div>
                    </div>
                  </div>
                </div>
                <div className="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                  <button
                    type="button"
                    className="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-red-600 text-base font-medium text-white hover:bg-red-700 focus:outline-none sm:ml-3 sm:w-auto sm:text-sm"
                    onClick={handleDeleteAllEmployees}
                  >
                    珥덇린???뺤씤
                  </button>
                  <button
                    type="button"
                    className="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm"
                    onClick={() => setShowDataResetModal(false)}
                  >
                    痍⑥냼
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
        
        {/* 寃??諛??≪뀡 諛?*/}
        <div className="bg-white shadow rounded-lg p-4 mb-6">
          <div className="flex flex-col sm:flex-row items-center justify-between space-y-3 sm:space-y-0">
            <div className="relative w-full sm:w-64">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <FiSearch className="text-gray-400" />
              </div>
              <input
                type="text"
                placeholder={t('employees.search')}
                className="pl-10 pr-4 py-2 border border-gray-300 rounded-md w-full focus:ring-primary-500 focus:border-primary-500"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>
            
            <div className="flex space-x-2">
              <button
                type="button"
                className="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none"
                onClick={() => setIsFilterOpen(!isFilterOpen)}
              >
                <FiFilter className="mr-2 h-4 w-4" />
                {t('employees.filter')}
              </button>
              
              <button
                type="button"
                className="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none"
                onClick={downloadExcelTemplate}
              >
                <FiDownload className="mr-2 h-4 w-4" />
                ?묒? ?쒗뵆由??ㅼ슫濡쒕뱶
              </button>
              
              <button
                type="button"
                className="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-green-700 bg-white hover:bg-gray-50 focus:outline-none"
                onClick={() => setShowExcelImportModal(true)}
              >
                <FiUpload className="mr-2 h-4 w-4" />
                ?묒??먯꽌 媛?몄삤湲?              </button>
              
              <button
                type="button"
                className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 focus:outline-none"
                onClick={() => setIsNewEmployeeModalOpen(true)}
              >
                <FiUserPlus className="mr-2 h-4 w-4" />
                {t('employees.addNew')}
              </button>
              
              {employees.length > 0 && (
                <button
                  type="button"
                  className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none"
                  onClick={() => setShowDataResetModal(true)}
                >
                  <FiX className="mr-2 h-4 w-4" />
                  紐⑤뱺 ?ъ썝 ??젣
                </button>
              )}
            </div>
          </div>
          
          {/* ?뚯씪 ?낅줈???④? Input */}
          <input 
            type="file" 
            ref={fileInputRef}
            className="hidden"
            accept=".xlsx,.xls"
            onChange={handleFileUpload}
          />
          
          {/* ?꾪꽣 ?⑤꼸 */}
          {isFilterOpen && (
            <div className="fixed inset-0 z-10 overflow-y-auto">
              <div className="flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
                <div className="fixed inset-0 transition-opacity" aria-hidden="true">
                  <div className="absolute inset-0 bg-gray-500 opacity-75" onClick={() => setIsFilterOpen(false)}></div>
                </div>
                <div className="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
                  <div className="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                    <h3 className="text-lg leading-6 font-medium text-gray-900 mb-4">?꾪꽣 ?ㅼ젙</h3>
                    <div className="space-y-4">
                      <div>
                        <label htmlFor="positionFilter" className="block text-sm font-medium text-gray-700">吏곸콉</label>
                        <select
                          id="positionFilter"
                          className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm rounded-md"
                          value={positionFilter}
                          onChange={(e) => setPositionFilter(e.target.value)}
                        >
                          <option value="">?꾩껜</option>
                          {positions.map((pos) => (
                            <option key={pos} value={pos}>{pos}</option>
                          ))}
                        </select>
                      </div>
                      <div>
                        <label htmlFor="departmentFilter" className="block text-sm font-medium text-gray-700">遺??/label>
                        <select
                          id="departmentFilter"
                          className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm rounded-md"
                          value={departmentFilter}
                          onChange={(e) => setDepartmentFilter(e.target.value)}
                        >
                          <option value="">?꾩껜</option>
                          {departmentItems.map((dept) => (
                            <option key={dept.id} value={dept.value}>{dept.label}</option>
                          ))}
                        </select>
                        <p className="mt-1 text-xs text-gray-500">
                          遺??紐⑸줉? <a href="/settings" className="text-blue-600 hover:text-blue-500">?ㅼ젙 &gt; ?댁뒋 ?곗씠??愿由?&gt; 遺??愿由?/a>?먯꽌 愿由ы븷 ???덉뒿?덈떎.
                        </p>
                      </div>
                      <div>
                        <label htmlFor="employeeIdFilter" className="block text-sm font-medium text-gray-700">?ъ썝 ID</label>
                        <input
                          type="text"
                          id="employeeIdFilter"
                          className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm rounded-md"
                          placeholder="?? EMP001"
                          value={employeeIdFilter}
                          onChange={(e) => setEmployeeIdFilter(e.target.value)}
                        />
                      </div>
                    </div>
                  </div>
                  <div className="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                    <button
                      type="button"
                      className="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-primary-600 text-base font-medium text-white hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 sm:ml-3 sm:w-auto sm:text-sm"
                      onClick={applyFilters}
                    >
                      ?곸슜
                    </button>
                    <button
                      type="button"
                      className="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm"
                      onClick={resetFilters}
                    >
                      珥덇린??                    </button>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
        
        {/* ?묒? 媛?몄삤湲?紐⑤떖 */}
        {showExcelImportModal && (
          <div className="fixed inset-0 z-10 overflow-y-auto">
            <div className="flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
              <div className="fixed inset-0 transition-opacity" aria-hidden="true">
                <div className="absolute inset-0 bg-gray-500 opacity-75" onClick={() => setShowExcelImportModal(false)}></div>
              </div>
              <div className="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
                <div className="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                  <h3 className="text-lg leading-6 font-medium text-gray-900 mb-4">?묒??먯꽌 ?ъ썝 紐⑸줉 媛?몄삤湲?/h3>
                  
                  {importResults.total > 0 ? (
                    <div>
                      <div className="mb-4 p-4 bg-gray-50 rounded-md">
                        <p className="text-sm text-gray-700">
                          <span className="font-medium">珥?{importResults.total}媛?/span>????ぉ 以?
                          <span className="font-medium text-green-600"> {importResults.success}媛?/span> 
                          媛?몄삤湲??깃났,
                          <span className="font-medium text-red-600"> {importResults.errors.length}媛?/span> ?ㅻ쪟
                        </p>
                        
                        {importResults.errors.length > 0 && (
                          <div className="mt-3">
                            <p className="text-sm font-medium text-red-700">?ㅻ쪟 ?댁뿭:</p>
                            <ul className="mt-1 text-sm text-red-600 list-disc list-inside">
                              {importResults.errors.slice(0, 5).map((error, index) => (
                                <li key={index}>{error}</li>
                              ))}
                              {importResults.errors.length > 5 && (
                                <li>... ??{importResults.errors.length - 5}媛?/li>
                              )}
                            </ul>
                          </div>
                        )}
                      </div>
                      
                      <button
                        type="button"
                        className="w-full inline-flex justify-center items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 focus:outline-none"
                        onClick={() => {
                          setShowExcelImportModal(false);
                          setImportResults({ total: 0, success: 0, errors: [] });
                        }}
                      >
                        ?뺤씤
                      </button>
                    </div>
                  ) : (
                    <>
                      <div className="mb-4">
                        <p className="text-sm text-gray-500">
                          ?ъ썝 紐⑸줉???덈뒗 ?묒? ?뚯씪???낅줈?쒗븯硫??쒖뒪?쒖뿉 ?먮룞?쇰줈 ?깅줉?⑸땲?? 
                          ?щ컮瑜??뺤떇?쇰줈 ?곗씠?곕? 以鍮꾪빐 二쇱꽭??
                        </p>
                        
                        <div className="mt-4 p-4 bg-blue-50 rounded-md">
                          <p className="text-sm text-blue-700 font-medium">?묒? ?뚯씪 ?뺤떇 ?덈궡:</p>
                          <ul className="mt-2 text-sm text-blue-600 list-disc list-inside">
                            <li>?꾩닔 ??ぉ: ?대쫫, 吏곸콉, 遺??/li>
                            <li>?좏깮 ??ぉ: ?ъ썝ID, ?곕씫泥? ?대찓?? ?낆궗??/li>
                            <li>
                              ?ъ썝ID媛 ?녿뒗 寃쎌슦 ?먮룞 ?앹꽦?⑸땲?? 
                              (TCME + 4?먮━ ?レ옄)
                            </li>
                          </ul>
                        </div>
                      </div>
                      
                      <div className="mt-6 flex flex-col space-y-3">
                        <button
                          type="button"
                          className="inline-flex justify-center items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 focus:outline-none"
                          onClick={triggerFileInput}
                        >
                          <FiUpload className="mr-2 h-4 w-4" />
                          ?묒? ?뚯씪 ?좏깮?섍린
                        </button>
                        
                        <button
                          type="button"
                          className="inline-flex justify-center items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none"
                          onClick={downloadExcelTemplate}
                        >
                          <FiDownload className="mr-2 h-4 w-4" />
                          ?섑뵆 ?쒗뵆由??ㅼ슫濡쒕뱶
                        </button>
                      </div>
                    </>
                  )}
                </div>
                
                {importResults.total === 0 && (
                  <div className="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                    <button
                      type="button"
                      className="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none sm:mt-0 sm:w-auto sm:text-sm"
                      onClick={() => setShowExcelImportModal(false)}
                    >
                      ?リ린
                    </button>
                  </div>
                )}
              </div>
            </div>
          </div>
        )}
        
        {/* 吏곸썝 ?뚯씠釉?*/}
        <div className="bg-white shadow overflow-hidden rounded-lg">
          {loading ? (
            <div className="px-6 py-12 text-center">
              <p className="text-gray-500">{t('employees.loading')}</p>
            </div>
          ) : error ? (
            <div className="px-6 py-12 text-center">
              <p className="text-red-500">{error}</p>
            </div>
          ) : (
            <>
              <div className="overflow-x-auto">
                <table className="min-w-full divide-y divide-gray-200">
                  <thead className="bg-gray-50">
                    <tr>
                      <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        {t('employees.id')}
                      </th>
                      <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        {t('employees.name')}
                      </th>
                      <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        {t('employees.position')}
                      </th>
                      <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        {t('employees.department')}
                      </th>
                      <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        {t('employees.contact')}
                      </th>
                      <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        {t('employees.hireDate')}
                      </th>
                      <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                        {t('employees.actions')}
                      </th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {employees.map((employee) => (
                      <tr key={employee.id} className="hover:bg-gray-50">
                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                          {employee.employeeId || `TCME${String(employee.id).padStart(4, '0')}`}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                          {employee.name}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                          <span className={`px-2 py-1 text-xs rounded-full ${
                            employee.position === '留ㅻ땲?' ? 'bg-blue-100 text-blue-800' : 'bg-gray-100 text-gray-800'
                          }`}>
                            {employee.position}
                          </span>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                          {employee.department}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                          {employee.contact}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                          {formatDate(employee.hireDate)}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                          <div className="flex space-x-3">
                            <button 
                              className="text-blue-600 hover:text-blue-900"
                              onClick={() => {/* ?몄쭛 湲곕뒫 */}}
                            >
                              {t('employees.edit')}
                            </button>
                            <button 
                              className="text-red-600 hover:text-red-900"
                              onClick={() => handleDeleteEmployee(employee.id)}
                            >
                              {t('employees.delete')}
                            </button>
                          </div>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
              
              {employees.length === 0 && (
                <div className="px-6 py-12 text-center border-t">
                  <p className="text-gray-500">{t('employees.noResults')}</p>
                </div>
              )}
              
              {/* ?섏씠吏?ㅼ씠??*/}
              {pagination.totalPages > 0 && (
                <div className="px-6 py-4 bg-gray-50 border-t border-gray-200 flex items-center justify-between">
                  <div className="flex-1 flex justify-between sm:hidden">
                    <button
                      onClick={() => handlePageChange(pagination.page - 1)}
                      disabled={pagination.page === 1}
                      className="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                      {t('employees.prev')}
                    </button>
                    <button
                      onClick={() => handlePageChange(pagination.page + 1)}
                      disabled={pagination.page === pagination.totalPages}
                      className="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                      {t('employees.next')}
                    </button>
                  </div>
                  <div className="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
                    <div>
                      <p className="text-sm text-gray-700">
                        {t('employees.total')}: <span className="font-medium">{pagination.total}</span> {t('employees.page')} <span className="font-medium">{pagination.page}</span> {t('employees.of')} <span className="font-medium">{pagination.totalPages}</span>
                      </p>
                    </div>
                    <div>
                      <nav className="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
                        <button
                          onClick={() => handlePageChange(pagination.page - 1)}
                          disabled={pagination.page === 1}
                          className="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                        >
                          <span className="sr-only">{t('employees.prev')}</span>
                          <FiChevronLeft className="h-5 w-5" />
                        </button>
                        
                        {/* ?섏씠吏 踰덊샇 */}
                        {Array.from({ length: Math.min(5, pagination.totalPages) }).map((_, i) => {
                          let pageNum;
                          if (pagination.totalPages <= 5) {
                            pageNum = i + 1;
                          } else if (pagination.page <= 3) {
                            pageNum = i + 1;
                          } else if (pagination.page >= pagination.totalPages - 2) {
                            pageNum = pagination.totalPages - 4 + i;
                          } else {
                            pageNum = pagination.page - 2 + i;
                          }
                          
                          return (
                            <button
                              key={pageNum}
                              onClick={() => handlePageChange(pageNum)}
                              className={`relative inline-flex items-center px-4 py-2 border text-sm font-medium ${
                                pagination.page === pageNum
                                  ? 'z-10 bg-primary-50 border-primary-500 text-primary-600'
                                  : 'bg-white border-gray-300 text-gray-500 hover:bg-gray-50'
                              }`}
                            >
                              {pageNum}
                            </button>
                          );
                        })}
                        
                        <button
                          onClick={() => handlePageChange(pagination.page + 1)}
                          disabled={pagination.page === pagination.totalPages}
                          className="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                        >
                          <span className="sr-only">{t('employees.next')}</span>
                          <FiChevronRight className="h-5 w-5" />
                        </button>
                      </nav>
                    </div>
                  </div>
                </div>
              )}
            </>
          )}
        </div>
        
        {/* ?좉퇋 ?ъ썝 ?깅줉 紐⑤떖 */}
        {isNewEmployeeModalOpen && (
          <div className="fixed inset-0 z-10 overflow-y-auto">
            <div className="flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
              <div className="fixed inset-0 transition-opacity" aria-hidden="true">
                <div className="absolute inset-0 bg-gray-500 opacity-75" onClick={() => setIsNewEmployeeModalOpen(false)}></div>
              </div>
              <div className="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
                <form onSubmit={handleSubmitNewEmployee}>
                  <div className="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                    <h3 className="text-lg leading-6 font-medium text-gray-900 mb-4">?좉퇋 ?ъ썝 ?깅줉</h3>
                    <div className="space-y-4">
                      <div>
                        <label htmlFor="employeeIdNumber" className="block text-sm font-medium text-gray-700">?ъ썝 ID 踰덊샇 (4?먮━) *</label>
                        <div className="mt-1 flex rounded-md shadow-sm">
                          <span className="inline-flex items-center px-3 rounded-l-md border border-r-0 border-gray-300 bg-gray-50 text-gray-500 text-sm">
                            TCME
                          </span>
                          <input
                            type="text"
                            id="employeeIdNumber"
                            name="employeeIdNumber"
                            maxLength={4}
                            placeholder="0001"
                            className={`flex-1 min-w-0 block w-full px-3 py-2 rounded-none rounded-r-md border-gray-300 focus:ring-primary-500 focus:border-primary-500 sm:text-sm ${formErrors.employeeIdNumber ? 'border-red-300' : ''}`}
                            value={newEmployee.employeeIdNumber}
                            onChange={handleNewEmployeeChange}
                          />
                        </div>
                        {formErrors.employeeIdNumber && <p className="mt-1 text-sm text-red-600">{formErrors.employeeIdNumber}</p>}
                      </div>
                      <div>
                        <label htmlFor="name" className="block text-sm font-medium text-gray-700">?대쫫 *</label>
                        <input
                          type="text"
                          id="name"
                          name="name"
                          className={`mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm rounded-md ${formErrors.name ? 'border-red-300' : ''}`}
                          value={newEmployee.name}
                          onChange={handleNewEmployeeChange}
                        />
                        {formErrors.name && <p className="mt-1 text-sm text-red-600">{formErrors.name}</p>}
                      </div>
                      <div>
                        <label htmlFor="position" className="block text-sm font-medium text-gray-700">吏곸콉 *</label>
                        <select
                          id="position"
                          name="position"
                          className={`mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm rounded-md ${formErrors.position ? 'border-red-300' : ''}`}
                          value={newEmployee.position}
                          onChange={handleNewEmployeeChange}
                        >
                          <option value="">?좏깮?섏꽭??/option>
                          {positions.map((pos) => (
                            <option key={pos} value={pos}>{pos}</option>
                          ))}
                        </select>
                        {formErrors.position && <p className="mt-1 text-sm text-red-600">{formErrors.position}</p>}
                      </div>
                      <div>
                        <label htmlFor="department" className="block text-sm font-medium text-gray-700">遺??*</label>
                        <select
                          id="department"
                          name="department"
                          className={`mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm rounded-md ${formErrors.department ? 'border-red-300' : ''}`}
                          value={newEmployee.department}
                          onChange={handleNewEmployeeChange}
                        >
                          <option value="">?좏깮?섏꽭??/option>
                          {departmentItems.map((dept) => (
                            <option key={dept.id} value={dept.value}>{dept.label}</option>
                          ))}
                        </select>
                        {formErrors.department && <p className="mt-1 text-sm text-red-600">{formErrors.department}</p>}
                      </div>
                      <div>
                        <label htmlFor="contact" className="block text-sm font-medium text-gray-700">?곕씫泥?*</label>
                        <input
                          type="text"
                          id="contact"
                          name="contact"
                          className={`mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm rounded-md ${formErrors.contact ? 'border-red-300' : ''}`}
                          placeholder="01012345678 ?먮뒗 010-1234-5678"
                          value={newEmployee.contact}
                          onChange={handleNewEmployeeChange}
                        />
                        {formErrors.contact && <p className="mt-1 text-sm text-red-600">{formErrors.contact}</p>}
                      </div>
                      <div>
                        <label htmlFor="email" className="block text-sm font-medium text-gray-700">?대찓??/label>
                        <input
                          type="email"
                          id="email"
                          name="email"
                          className={`mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm rounded-md ${formErrors.email ? 'border-red-300' : ''}`}
                          placeholder="example@example.com"
                          value={newEmployee.email}
                          onChange={handleNewEmployeeChange}
                        />
                        {formErrors.email && <p className="mt-1 text-sm text-red-600">{formErrors.email}</p>}
                      </div>
                      <div>
                        <label htmlFor="hireDate" className="block text-sm font-medium text-gray-700">?낆궗??*</label>
                        <input
                          type="date"
                          id="hireDate"
                          name="hireDate"
                          className={`mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm rounded-md ${formErrors.hireDate ? 'border-red-300' : ''}`}
                          value={newEmployee.hireDate}
                          onChange={handleNewEmployeeChange}
                        />
                        {formErrors.hireDate && <p className="mt-1 text-sm text-red-600">{formErrors.hireDate}</p>}
                      </div>
                    </div>
                  </div>
                  <div className="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                    <button
                      type="submit"
                      className="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-primary-600 text-base font-medium text-white hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 sm:ml-3 sm:w-auto sm:text-sm"
                    >
                      ?깅줉
                    </button>
                    <button
                      type="button"
                      className="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm"
                      onClick={() => setIsNewEmployeeModalOpen(false)}
                    >
                      痍⑥냼
                    </button>
                  </div>
                </form>
              </div>
            </div>
          )}
        </div>
      </main>
    </div>
  );
} 
