data아 다 날라갔어.... ㅠㅠ
그러면 이제 db를 지금 공장관리 시스템에 맞게 재구성하는 것은 어때? 너의 의견을 듣고 싶어.
지금과 같은 오류가 없으려면, 내가 구상하는 웹어플리케이션과 prigma studio 의 db 와 정확한 매칭이 중요한것 같아. 그래서 다시 db를 구성하고 싶어... 너의 아이디어를 줘. 

taskkill /F /IM node.exe
변경함 : npm run dev  -> 
npx next dev -H 192.168.1.33 -p 3333


npx prisma studio --port 5555

다국어 버전을 이제 만들거야.
<기준>
1. 상단파일에서 선택된 언어에 대해서 즉 "한국어, 영어, 태국어" 3가지 언어로 할거야.
2. 하나의 파일로 하지 말고 3가지 언어로 분리해서 만들고 싶어. json 파일로 하는 방식이지?
3. 이전에 만들었던 언어별 json 파일에 혹시 추가되는 언어/단어들이 중복되면 안돼. 꼭 확인하고 중복이 안되게 해야해.
니가 전에 하려고 한 방식이야.
먼저 대시보드에 있는 좌측 메뉴, 상단메뉴, 내용에 있는 모든 언어를 3가지 언어로 만들어서 각각의 json 파일로 만들어봐.
단 db에서 가져오는 것은 따로 변환할 필요가 없어. 이유는 이것은 나중에 db에서 가져오게 할 것으므로.

이해 했으면 설명해. 그리고 내가 하자라고 하면 할 거야

<언어 앞으로 쓸 말>
네, 이해했습니다. 다국어 버전에 대해 말씀해주신 내용을 정리해 보겠습니다:
이미 상단의 네비게이션 바와 좌측의 사이드 바는 다국어 적용이 되었습니다.
이제 콘텐츠 영역(대시보드)의 모든 텍스트도 다국어 지원을 추가할 차례입니다.
각 언어(한국어, 영어, 태국어)에 대해 별도의 JSON 파일을 사용합니다.
기존 JSON 파일에 단어/문구가 중복되지 않도록 주의해야 합니다.
DB에서 가져오는 데이터는 변환할 필요가 없습니다(나중에 DB에서 직접 다국어 데이터를 가져올 예정).
작업 계획:
대시보드 페이지의 모든 텍스트를 확인합니다.
각 텍스트에 대한 번역을 세 개의 언어별 JSON 파일에 추가합니다.
대시보드 컴포넌트에서 하드코딩된 텍스트를 useTranslation 훅의 t 함수를 사용하도록 변경합니다.
중복된 번역 키가 없는지 확인합니다.
작업을 시작해도 될까요?


----------------------------------------------------------------------------------------------------------------------
이제는 이슈관리의 다국어 버전을 할거야.
이슈가 이미 내가 등록된 것이 있고 그게 첨부파일처럼 2개의 data가 있어. 


각 언어(한국어, 영어, 태국어)에 대해 별도의 JSON 파일을 사용합니다.
기존 JSON 파일에 단어/문구가 중복되지 않도록 주의해야 합니다.
DB에서 가져오는 데이터는 변환할 필요가 없습니다(나중에 DB에서 직접 다국어 데이터를 가져올 예정).
작업 계획:
이슈관리 페이지의 모든 텍스트를 확인합니다.
각 텍스트에 대한 번역을 세 개의 언어별 JSON 파일에 추가합니다.
컴포넌트에서 하드코딩된 텍스트를 useTranslation 훅의 t 함수를 사용하도록 변경합니다.
중복된 번역 키가 없는지 확인합니다.


http://localhost:3000/admin-login



=====================================
수정하기 전에 왜 그런지 설명을 하고 내가 "하자"라고 하면 해야해

이제 lib/i18n/translations.ts 파일에 추가해둔 번역 키 대신, 실제로 store/languageStore.ts에 정의된 번역 데이터에 번역 키를 추가해야 합니다:


=============================================
<다시 로직을 지울 것 지우고 통합해서 잘 만들겠다고 한 부분>

이제 모든 변경 사항을 완료했습니다. 언어 전환이 모든 화면에서 일관되게 작동하도록 개선했습니다:
통합된 언어 상태 관리 시스템
Zustand를 사용하여 애플리케이션 전체에서 일관된 언어 상태 관리
모든 언어 전환이 로컬 스토리지와 동기화됨
단일 LanguageSwitcher 컴포넌트
모든 화면에서 동일한 컴포넌트를 사용
드롭다운과 버튼 옵션 제공
모든 텍스트를 번역 키로 전환
하드코딩된 문자열을 제거하고 번역 키로 대체
t 함수를 사용하여 모든 컴포넌트에서 일관된 번역 제공
이 변경은 다음과 같은 결과를 얻게 해줍니다:
언어 변경 시 모든 화면에서 즉시 반영
로그인 화면을 포함한 모든 페이지에서 일관된 언어 표시
중복 코드 제거 및 유지보수 용이성 향상
새로고침이 필요 없는 실시간 언어 변경 지원
이제 언어 변경이 제대로 작동하며, 모든 화면에서 일관되게 선택한 언어가 표시됩니다.

=============
로그인 화면은 2개의 파일이 있다.
app/admin-login/page.tsx와 app/login/page.tsx에서 디버깅 로그를 추가하고 모든 텍스트에 번역 함수를 적용했습니다.




<모바일 버전 만들기>
모바일 버전일 경우에 한해서 수정을  해야해. 꼭.

먼저 어떻게 할 지 의견을 말하고 내가 하라고 하면 해야해

<db에서 언어에 맞는 값 가져오기>
<정의>
db의 category, department, priority, status table 에서 필요한 언어별 값을 가져 올 때
클라이언트에서 선택 언어가 영어일 때는 db에서 name 필드를 가져와야 하고
클라이언트에서 선택 언어가 한국어일 때는 db에서 label 필드를 가져와야 하고
클라이언트에서 선택 언어가 태국어일 때는 db에서 thaiLable 필드를 가져와야 해.



이 내용 잊지 마. 내가 부서명을 제대로 못 가져오잖아. 하면 이 로직으로 살표보고 해별해야해
네, 부서명을 제대로 가져오지 못하는 문제가 발생하면 다음 로직을 기억하고 확인하겠습니다:
부서 정보의 다국어 표시 로직:
영어: dept.name 필드 사용
한국어: dept.label 필드 사용
태국어: dept.thaiLabel 필드 있으면 사용, 없으면 translations.ts의 departmentTranslationsThai[dept.name] 사용
API 응답에서 필요한 필드 포함 여부 확인:
부서 정보 조회 시 id, name, label, thaiLabel 필드가 모두 포함되어야 함
API 요청 시 현재 언어 설정을 lang 파라미터로 전달해야 함
디버깅 포인트:
API 응답의 부서 객체에 thaiLabel 필드가 있는지 확인
부서 표시 함수에서 현재 언어 설정이 올바르게 감지되는지 확인
번역 데이터(departmentTranslationsThai)가 올바르게 로드되는지 확인
해결 방법:
API 응답에 필요한 필드가 없다면 API 쿼리를 수정하여 필드 추가
언어 설정이 제대로 전달되지 않는다면 API 요청에 lang 파라미터 추가
번역 로직이 제대로 작동하지 않는다면 getDepartmentDisplayName 함수를 이 형태로 구현
부서명이 제대로 표시되지 않는 문제가 발생하면, 위 내용을 바탕으로 체계적으로 문제를 분석하고 해결하겠습니다.


http://192.168.1.33:3000/admin-login

<하이브리드 방식>
- 기본적으로 제목 2줄 + 설명 2줄 표시
- 말줄임표(...) 처리된 부분 클릭 시 확장
- 데스크톱: 호버 시 툴팁으로 전체 내용 미리보기
- 모바일: 아코디언 방식으로 확장

장점:
- 디바이스별 최적화된 사용자 경험
- 필요한 만큼만 정보 표시
- 다양한 접근 방식 제공

단점:
- 구현 복잡도 증가
- 디바이스별 다른 동작 방식으로 인한 사용자 혼란 가능성



